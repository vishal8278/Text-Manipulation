{"version":3,"sources":["components/Navbar.js","components/FormText.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","AboutText","role","onClick","toggleMode","htmlFor","FormText","text","setText","useState","Fragment","style","color","heading","value","backgroundColor","onChange","event","target","rows","disabled","length","handleUpClick","newtext","toUpperCase","showalert","handleLoClick","toLowerCase","handleClearClick","handleCopy","navigator","clipboard","writeText","handleExtraSpace","newText","split","join","filter","element","About","mystyle","data-bs-parent","Alert","height","alert","word","lower","charAt","slice","captlize","msg","App","setmode","setalert","message","setTimeout","Router","document","body","Switch","Route","exact","path","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a36b0176.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.AboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n\r\n          {/* // for multiple color button toggle */}\r\n          {/* <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2  \" onClick = {()=>{props.toggleMode('primary')}} style={{height:\"30px\",width:\"30px\"}}></div>\r\n            <div className=\"bg-secondary rounded mx-2 \" onClick = {()=>{props.toggleMode('secondary')}} style={{height:\"30px\",width:\"30px\"}}></div>\r\n            <div className=\"bg-success rounded mx-2 \" onClick = {()=>{props.toggleMode('success')}} style={{height:\"30px\",width:\"30px\"}}></div>\r\n            <div className=\"bg-danger rounded mx-2 \" onClick = {()=>{props.toggleMode('danger')}} style={{height:\"30px\",width:\"30px\"}}></div>\r\n            <div className=\"bg-warning rounded mx-2 \" onClick = {()=>{props.toggleMode('warning')}} style={{height:\"30px\",width:\"30px\"}}></div>\r\n            <div className=\"bg-info rounded mx-2 \" onClick = {()=>{props.toggleMode('info')}} style={{height:\"30px\",width:\"30px\"}}></div>\r\n            <div className=\"bg-dark rounded mx-2 \" onClick = {()=>{props.toggleMode('dark')}} style={{height:\"30px\",width:\"30px\"}}></div>\r\n            <div className=\"bg-white rounded mx-2\" onClick = {()=>{props.toggleMode('white')}} style={{height:\"30px\",width:\"30px\"}}></div>\r\n          </div> */}\r\n\r\n          {/* // for single button toggle */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  AboutText: PropTypes.string,\r\n}","import React ,{useState} from 'react'\r\n\r\nexport default function FormText(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"button has been click\" + text);\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showalert(\"converted to uppercase\",\"success\");\r\n    }\r\n    \r\n    const handleLoClick = ()=>{\r\n        // console.log(\"button has been click\" + text);\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        props.showalert(\"converted to lowercase\",\"success\");\r\n    }\r\n    \r\n    const handleClearClick = ()=>{\r\n        // console.log(\"button has been click\" + text);\r\n        let text = \"\";\r\n        setText(text);\r\n        props.showalert(\"text clear\",\"success\");\r\n    }\r\n    \r\n    const handleCopy = ()=>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showalert(\"copy of text\",\"success\");\r\n    }\r\n    \r\n    const handleonchange = (event)=>{\r\n        // console.log(\"button has been click\");\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ] + /);\r\n        setText(newText.join(\" \"))\r\n        props.showalert(\"removing of extra space\",\"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('Enter the text');\r\n    // setText(\"it is set by setText\");\r\n\r\n    return (\r\n        <>\r\n\r\n        <div className='container' style={{color : props.mode === 'dark'?'white':'#042743'}}>\r\n            <h1 className='mb-4'>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value = {text} style={{backgroundColor : props.mode === 'dark'?'#13466e':'white',color: props.mode === 'dark'?'white':'#042743' }} onChange ={handleonchange} id=\"myBox\" rows=\"8\" ></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className='btn btn-primary mx-2 my-1' onClick = {handleUpClick} > lower tO UPPERCASE</button>\r\n            <button disabled={text.length===0} className='btn btn-primary mx-2 my-1' onClick = {handleLoClick} > UPPER To lowercae</button>\r\n            <button disabled={text.length===0} className='btn btn-primary mx-2 my-1' onClick = {handleClearClick} > Clear Text</button>\r\n            <button disabled={text.length===0} className='btn btn-primary mx-2 my-1' onClick = {handleCopy} >copy to clipboard</button>\r\n            <button disabled={text.length===0} className='btn btn-primary mx-2 my-1' onClick = {handleExtraSpace} >Remove extra space</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color : props.mode === 'dark'?'white':'#042743'}}>\r\n         <h2>your text summary</h2>\r\n         {/* <p>{text.split(\" \").filter((element)=>{return element.length !== 0}).length} words and {text.length} character</p> */}\r\n         <p>{text.split(/\\s+/).filter((element)=>{return element.length !== 0}).length} words and {text.length} character</p>\r\n         <p>{0.008*text.split(/\\s+/).filter((element)=>{return element.length !== 0}).length} minute read</p>\r\n         {/* <p>{0.008*text.split(\" \").filter((element)=>{return element.length !== 0}).length} minute read</p> */}\r\n         <h2>preview</h2>\r\n         <p>{text.length>0?text:'enter the text for preview'}</p>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\n// let mystyle = {\r\n//     color : 'white',\r\n//     backgroundColor: 'black'\r\n// }\r\n\r\n\r\n\r\nexport default function About(props) {\r\n  // const [mystyle, setmystyle] = useState({\r\n  //   color : 'black',\r\n  //   backgroundColor: 'white'  \r\n    \r\n  // })\r\n\r\n  let mystyle={\r\n    color: props.mode==='dark'?'white':'#042743',\r\n    backgroundColor: props.mode === 'dark'?'#13466e':'white'\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"my-3\" style ={{color: props.mode==='dark'?'white':'#042743'}}>About us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style ={mystyle}>\r\n        <div className=\"accordion-item\" >\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\" style ={mystyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style ={mystyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\" style ={mystyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style ={mystyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\" style ={mystyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\"style ={mystyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <button type=\"button\" onClick={togglestyle} className=\"btn btn-primary my-3\">{btnstyle}</button> */}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const captlize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>{\r\n            props.alert && <div className ={`alert alert-${props.alert.type} alert-dismissible fade show`} role = \"alert\">\r\n            <strong>{captlize(props.alert.type)}</strong>: {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\r\n            </button> */}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport FormText from './components/FormText';\r\nimport About from './components/About';\r\nimport React, { useState } from 'react'\r\nimport Alert from './components/Alert';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setmode] = useState('light');\r\n  const [alert, setalert] = useState(null);\r\n\r\n  const showalert = (message, type) => {\r\n    setalert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setalert(null);\r\n    }, 2000);\r\n  }\r\n\r\n  // for multiple color button toggle\r\n\r\n// const backgroundremove=(cls)=>{\r\n//   document.body.classList.remove('primary'); \r\n//   document.body.classList.remove('secondary'); \r\n//   document.body.classList.remove('success'); \r\n//   document.body.classList.remove('danger'); \r\n//   document.body.classList.remove('warning'); \r\n//   document.body.classList.remove('info'); \r\n//   document.body.classList.remove('dark'); \r\n//   document.body.classList.remove('white'); \r\n// }\r\n\r\n// const toggleMode = (cls) => {\r\n//   console.log(cls);\r\n//   backgroundremove();\r\n//     document.body.classList.add('bg-'+cls);\r\n//     if (mode === 'light') {\r\n//       setmode('dark')\r\n//       document.body.style.backgroundColor = \"#042743\";\r\n//       showalert(\"dark mode has been enabled\", \"success\");\r\n//       // document.title = 'Text Util - Dark mode'\r\n//       // setInterval(() => {\r\n//       //   document.title = 'Text Util - Dark mode'\r\n//       // }, 1200);\r\n//       // setInterval(() => {\r\n//       //   document.title = 'Text Util - Light mode'\r\n//       // }, 1500);\r\n//     }\r\n//     else {\r\n//       setmode('light')\r\n//       document.body.style.backgroundColor = \"white\";\r\n//       showalert(\"light mode has enable\", \"success\");\r\n//       // document.title = 'Text Util - light mode'\r\n//     }\r\n//   }\r\n\r\n  // for single button toggle\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setmode('dark')\r\n      document.body.style.backgroundColor = \"#042743\";\r\n      showalert(\"dark mode has been enabled\", \"success\");\r\n      // document.title = 'Text Util - Dark mode'\r\n      // setInterval(() => {\r\n      //   document.title = 'Text Util - Dark mode'\r\n      // }, 1200);\r\n      // setInterval(() => {\r\n      //   document.title = 'Text Util - Light mode'\r\n      // }, 1500);\r\n    }\r\n    else {\r\n      setmode('light')\r\n      document.body.style.backgroundColor = \"white\";\r\n      showalert(\"light mode has enable\", \"success\");\r\n      // document.title = 'Text Util - light mode'\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Navbar title=\"Textutil\" AboutText=\"About us\" mode={mode} toggleMode={toggleMode} />\r\n        <Alert alert={alert}/>\r\n        <div className=\"container my-3\" >\r\n          <Switch>\r\n            <Route exact path=\"/about\">\r\n              <About mode={mode} />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <FormText showalert={showalert} heading=\"Enter the text analyse\" mode={mode} />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}